trigger:
  - none

pool:
  name: selfpool
  demands:
    - agent.name -equals cagent

steps:
- script: |
    export BUILD_ID=$(Build.BuildId)
    echo "BUILD_ID is set to: $BUILD_ID"
  
- script: |
    ls -la $(Build.SourcesDirectory)
    git clone https://github.com/steff69/Backend_final.git backend
  displayName: 'Clone Backend Repository'

# Flutter updates
- script: |
    flutter --version
    flutter pub outdated
    flutter pub upgrade --major-versions
    flutter pub get 
  displayName: 'Flutter updates (upgrade --major-versions)'

# Run Tests First
- script: |
    flutter --version
#    flutter test test/widget_test.dart
  displayName: 'Integration Test'

- script: |
    flutter pub get
    flutter pub run build_runner build --delete-conflicting-outputs
  displayName: 'Generate Mock Classes'
  
- script: |
    flutter test test/register_controller_test.dart
    flutter test test/register_page_test.dart
  displayName: 'JUnit Test'

- script: |
    flutter test --machine > test-results.json
    cat test-results.json | tojunit > test-results.xml || true
  displayName: 'Create JUnit Test Results'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: './test-results.xml'
    testResultsFormat: 'PublishTestResults JUnit'

# Run Backend Tests
- script: |
    cd backend
    npm install
    npm test
  displayName: 'Run Backend Tests'

# Build APK after tests pass
- script: |
    flutter clean
    flutter pub get
    flutter build apk --release --verbose
  displayName: 'Build APK'

# Print current working directory and its contents
- task: Bash@3
  displayName: 'Show Current Directory'
  inputs:
    targetType: 'inline'
    script: |
      echo "Current Directory:"
      pwd
      echo "Contents:"
      ls -la




- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      docker ps -q --filter "publish=8083" | grep -q . && docker stop $(docker ps -q --filter "publish=8083") && docker rm $(docker ps -aq --filter "publish=8083") || echo "No container running on port 8083"
      docker ps -q --filter "publish=8080" | grep -q . && docker stop $(docker ps -q --filter "publish=8080") && docker rm $(docker ps -aq --filter "publish=8080") || echo "No container running on port 8080"


# Build Docker Images for frontend
- task: Docker@2
  inputs:
    containerRegistry: 'docker'
    repository: 'mustapha69/frontend_final'
    command: 'build'
    Dockerfile: 'Docker/Dockerfile'
    buildContext: '/home/azureuser/myagent/_work/1/s'
    tags: '$(Build.BuildId)'
  displayName: 'Build Frontend Docker Image'

# Build Docker Images for backend
- task: Docker@2
  inputs:
    containerRegistry: 'docker'
    repository: 'mustapha69/backend_final'
    command: 'build'
    Dockerfile: 'backend/Docker/Dockerfile'
    buildContext: '/home/azureuser/myagent/_work/1/s'
    tags: '$(Build.BuildId)'
  displayName: 'Build Backend Docker Image'

# Create a directory to hold both reports
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      mkdir -p trivy-reports
  displayName: 'Create Reports Directory'

# Trivy scan for the frontend Docker image
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      trivy image --exit-code 0 --severity HIGH,CRITICAL mustapha69/frontend_final:$(Build.BuildId) --format table --output trivy-reports/trivy-frontend-report.txt
  displayName: 'Run Trivy Scan on Frontend'

# Trivy scan for the backend Docker image
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      trivy image --exit-code 0 --severity HIGH,CRITICAL mustapha69/backend_final:$(Build.BuildId) --format table --output trivy-reports/trivy-backend-report.txt
  displayName: 'Run Trivy Scan on Backend'

# Publish both Trivy Reports
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'trivy-reports'  # Publish the entire directory
    artifactName: 'TrivyReports(Front and Fack)'    # Name of the artifact
    publishLocation: 'Container'
  displayName: 'Publish Trivy Reports'

# Push Docker Images for frontend 
- task: Docker@2
  inputs:
    containerRegistry: 'docker'
    repository: 'mustapha69/frontend_final'
    command: 'push'
    tags: '$(Build.BuildId)'
  displayName: 'Push Frontend Docker To Registry'

# Push Docker Images for backend after Trivy Scan passes
- task: Docker@2
  inputs:
    containerRegistry: 'docker'
    repository: 'mustapha69/backend_final'
    command: 'push'
    tags: '$(Build.BuildId)'
  displayName: 'Push Backend Docker Image To Registry'

# Use Docker Compose to run both frontend and backend containers
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      export BUILD_ID=$(Build.BuildId)
      docker-compose -f docker-compose.yml up -d
  displayName: 'Run Docker Compose'

# Verify Containers are Running
- script: |
    docker ps -a
  displayName: 'Verify Containers are Running'
